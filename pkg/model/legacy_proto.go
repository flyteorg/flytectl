package model

import (
	"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"
	"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/timestamp"
)

// A map of Variables
type VariableMap struct {
	// Defines a map of variable names to variables.
	Variables map[string]*core.Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VariableMap) Reset()         { *m = VariableMap{} }
func (m *VariableMap) String() string { return proto.CompactTextString(m) }
func (*VariableMap) ProtoMessage()    {}
func (*VariableMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7be6cbe85c3def, []int{1}
}

func (m *VariableMap) GetVariables() map[string]*core.Variable {
	if m != nil {
		return m.Variables
	}
	return nil
}

// Defines strongly typed inputs and outputs.
type TypedInterface struct {
	Inputs  *VariableMap `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs *VariableMap `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (m *TypedInterface) Reset()         { *m = TypedInterface{} }
func (m *TypedInterface) String() string { return proto.CompactTextString(m) }
func (*TypedInterface) ProtoMessage()    {}
func (*TypedInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7be6cbe85c3def, []int{2}
}

func (m *TypedInterface) GetInputs() *VariableMap {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TypedInterface) GetOutputs() *VariableMap {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// A map of Parameters.
type ParameterMap struct {
	// Defines a map of parameter names to parameters.
	Parameters map[string]*core.Parameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ParameterMap) Reset()         { *m = ParameterMap{} }
func (m *ParameterMap) String() string { return proto.CompactTextString(m) }
func (*ParameterMap) ProtoMessage()    {}
func (*ParameterMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7be6cbe85c3def, []int{4}
}

func (m *ParameterMap) GetParameters() map[string]*core.Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

var fileDescriptor_cd7be6cbe85c3def = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0xed, 0xec, 0x6a, 0xbb, 0x7b, 0xa3, 0x55, 0xe6, 0x41, 0x63, 0xa8, 0x10, 0xf2, 0xb4, 0x45,
	0x9a, 0x40, 0x2c, 0x22, 0x3e, 0x16, 0xc4, 0x8a, 0x0a, 0x32, 0xf8, 0x01, 0xe2, 0xcb, 0x24, 0xb9,
	0x9b, 0x0e, 0xa6, 0x99, 0x71, 0x32, 0x09, 0xc4, 0xdf, 0xe1, 0xdf, 0xf0, 0xcd, 0x1f, 0x28, 0xc9,
	0x26, 0x69, 0xb2, 0x34, 0xf8, 0x36, 0x77, 0xce, 0x39, 0x39, 0x27, 0x73, 0xb8, 0xf0, 0x74, 0x9b,
	0xd5, 0x06, 0x45, 0x92, 0x05, 0xb1, 0xd4, 0x18, 0x88, 0xdc, 0xa0, 0xde, 0xf2, 0x18, 0x7d, 0xa5,
	0xa5, 0x91, 0xf4, 0x7e, 0x0f, 0xfb, 0x0d, 0xec, 0x3c, 0x99, 0xb2, 0x4d, 0xad, 0xb0, 0xd8, 0x31,
	0x9d, 0x93, 0x29, 0x94, 0x09, 0x83, 0x9a, 0x67, 0x1d, 0xea, 0x7d, 0x87, 0xd5, 0x17, 0xae, 0x05,
	0x8f, 0x32, 0xa4, 0x3e, 0xdc, 0x69, 0x84, 0x36, 0x71, 0xc9, 0xc6, 0x0a, 0x1d, 0x7f, 0x62, 0xe1,
	0xbf, 0xdf, 0x09, 0x3f, 0xd5, 0x0a, 0x59, 0xcb, 0xa3, 0x2e, 0x58, 0x09, 0x16, 0xb1, 0x16, 0xca,
	0x08, 0x99, 0xdb, 0x0b, 0x97, 0x6c, 0xd6, 0x6c, 0x7c, 0xe5, 0xfd, 0x21, 0x60, 0xf5, 0x9f, 0xff,
	0xc0, 0x15, 0x7d, 0x03, 0xeb, 0xaa, 0x1b, 0x0b, 0x9b, 0xb8, 0xcb, 0x8d, 0x15, 0x9e, 0xee, 0xd9,
	0x8c, 0xe8, 0xc3, 0xb9, 0x78, 0x9d, 0x1b, 0x5d, 0xb3, 0x1b, 0xad, 0xf3, 0x19, 0x8e, 0xa7, 0x20,
	0x7d, 0x08, 0xcb, 0x1f, 0x58, 0xb7, 0xd9, 0xd7, 0xac, 0x39, 0xd2, 0x33, 0xb8, 0x5b, 0xf1, 0xac,
	0xc4, 0x36, 0x98, 0x15, 0x3e, 0x9e, 0x31, 0x62, 0x3b, 0xd6, 0xab, 0xc5, 0x4b, 0xe2, 0xfd, 0x82,
	0xe3, 0xe6, 0xff, 0x92, 0xb7, 0xfd, 0x6b, 0xd3, 0x10, 0x0e, 0x45, 0xae, 0x4a, 0x53, 0xcc, 0xbc,
	0xca, 0x28, 0x2e, 0xeb, 0x98, 0xf4, 0x1c, 0x8e, 0x64, 0x69, 0x5a, 0xd1, 0xe2, 0xbf, 0xa2, 0x9e,
	0xea, 0xfd, 0x26, 0xb0, 0xfe, 0xc8, 0x35, 0xbf, 0x46, 0x83, 0x9a, 0x9e, 0xc2, 0xb2, 0xe2, 0xba,
	0x33, 0x9d, 0x8d, 0xde, 0x70, 0x68, 0x08, 0x47, 0x09, 0x6e, 0x79, 0x99, 0x99, 0xce, 0xee, 0xd1,
	0xed, 0xcd, 0x5d, 0x1e, 0xb0, 0x9e, 0x48, 0x4f, 0x60, 0xa5, 0xf1, 0x67, 0x29, 0x34, 0x26, 0xf6,
	0xd2, 0x25, 0x9b, 0xd5, 0xe5, 0x01, 0x1b, 0x6e, 0x2e, 0x00, 0x56, 0x11, 0x5e, 0xf1, 0x4a, 0x48,
	0xed, 0xfd, 0x25, 0x70, 0x6f, 0x88, 0xd5, 0x74, 0xf8, 0x0e, 0x40, 0xf5, 0x73, 0x5f, 0xe2, 0xb3,
	0x3d, 0xc7, 0xb1, 0xe0, 0x66, 0xe8, 0x6a, 0x1c, 0xc9, 0x9d, 0xaf, 0xf0, 0x60, 0x0f, 0xbe, 0xa5,
	0x48, 0x7f, 0x5a, 0xa4, 0x3d, 0x67, 0x36, 0x6a, 0xf2, 0xe2, 0xc5, 0xb7, 0xf3, 0x54, 0x98, 0xab,
	0x32, 0xf2, 0x63, 0x79, 0x1d, 0xb4, 0x02, 0xa9, 0xd3, 0x60, 0xd8, 0x85, 0x14, 0xf3, 0x40, 0x45,
	0x67, 0xa9, 0x0c, 0x26, 0xeb, 0x11, 0x1d, 0xb6, 0x6b, 0xf1, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x61, 0xf3, 0xc7, 0x07, 0x7f, 0x03, 0x00, 0x00,
}

// A LaunchPlan provides the capability to templatize workflow executions.
// Launch plans simplify associating one or more schedules, inputs and notifications with your workflows.
// Launch plans can be shared and used to trigger executions with predefined inputs even when a workflow
// definition doesn't necessarily have a default value for said input.
type LaunchPlan struct {
	// Uniquely identifies a launch plan entity.
	Id *core.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-provided launch plan details, including reference workflow, inputs and other metadata.
	Spec *LaunchPlanSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Values computed by the flyte platform after launch plan registration.
	Closure *LaunchPlanClosure `protobuf:"bytes,3,opt,name=closure,proto3" json:"closure,omitempty"`
}

func (m *LaunchPlan) Reset()         { *m = LaunchPlan{} }
func (m *LaunchPlan) String() string { return proto.CompactTextString(m) }
func (*LaunchPlan) ProtoMessage()    {}
func (*LaunchPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_368a863574f5e699, []int{2}
}

func (m *LaunchPlan) GetId() *core.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LaunchPlan) GetSpec() *LaunchPlanSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LaunchPlan) GetClosure() *LaunchPlanClosure {
	if m != nil {
		return m.Closure
	}
	return nil
}

// User-provided launch plan definition and configuration values.
type LaunchPlanSpec struct {
	// Reference to the Workflow template that the launch plan references
	WorkflowId *core.Identifier `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Metadata for the Launch Plan
	EntityMetadata *admin.LaunchPlanMetadata `protobuf:"bytes,2,opt,name=entity_metadata,json=entityMetadata,proto3" json:"entity_metadata,omitempty"`
	// Input values to be passed for the execution.
	// These can be overriden when an execution is created with this launch plan.
	DefaultInputs *ParameterMap `protobuf:"bytes,3,opt,name=default_inputs,json=defaultInputs,proto3" json:"default_inputs,omitempty"`
	// Fixed, non-overridable inputs for the Launch Plan.
	// These can not be overriden when an execution is created with this launch plan.
	FixedInputs *core.LiteralMap `protobuf:"bytes,4,opt,name=fixed_inputs,json=fixedInputs,proto3" json:"fixed_inputs,omitempty"`
	// String to indicate the role to use to execute the workflow underneath
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"` // Deprecated: Do not use.
	// Custom labels to be applied to the execution resource.
	Labels *admin.Labels `protobuf:"bytes,6,opt,name=labels,proto3" json:"labels,omitempty"`
	// Custom annotations to be applied to the execution resource.
	Annotations *admin.Annotations `protobuf:"bytes,7,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Indicates the permission associated with workflow executions triggered with this launch plan.
	Auth     *admin.Auth     `protobuf:"bytes,8,opt,name=auth,proto3" json:"auth,omitempty"`                         // Deprecated: Do not use.
	AuthRole *admin.AuthRole `protobuf:"bytes,9,opt,name=auth_role,json=authRole,proto3" json:"auth_role,omitempty"` // Deprecated: Do not use.
	// Indicates security context for permissions triggered with this launch plan
	SecurityContext *core.SecurityContext `protobuf:"bytes,10,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"`
	// Indicates the runtime priority of the execution.
	QualityOfService *core.QualityOfService `protobuf:"bytes,16,opt,name=quality_of_service,json=qualityOfService,proto3" json:"quality_of_service,omitempty"`
	// Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).
	RawOutputDataConfig *admin.RawOutputDataConfig `protobuf:"bytes,17,opt,name=raw_output_data_config,json=rawOutputDataConfig,proto3" json:"raw_output_data_config,omitempty"`
	// Controls the maximum number of tasknodes that can be run in parallel for the entire workflow.
	// This is useful to achieve fairness. Note: MapTasks are regarded as one unit,
	// and parallelism/concurrency of MapTasks is independent from this.
	MaxParallelism int32 `protobuf:"varint,18,opt,name=max_parallelism,json=maxParallelism,proto3" json:"max_parallelism,omitempty"`
}

func (m *LaunchPlanSpec) Reset()         { *m = LaunchPlanSpec{} }
func (m *LaunchPlanSpec) String() string { return proto.CompactTextString(m) }
func (*LaunchPlanSpec) ProtoMessage()    {}
func (*LaunchPlanSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_368a863574f5e699, []int{5}
}

func (m *LaunchPlanSpec) GetWorkflowId() *core.Identifier {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

func (m *LaunchPlanSpec) GetEntityMetadata() *admin.LaunchPlanMetadata {
	if m != nil {
		return m.EntityMetadata
	}
	return nil
}

func (m *LaunchPlanSpec) GetDefaultInputs() *ParameterMap {
	if m != nil {
		return m.DefaultInputs
	}
	return nil
}

func (m *LaunchPlanSpec) GetFixedInputs() *core.LiteralMap {
	if m != nil {
		return m.FixedInputs
	}
	return nil
}

// Deprecated: Do not use.
func (m *LaunchPlanSpec) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *LaunchPlanSpec) GetLabels() *admin.Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *LaunchPlanSpec) GetAnnotations() *admin.Annotations {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *LaunchPlanSpec) GetAuth() *admin.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

// Deprecated: Do not use.
func (m *LaunchPlanSpec) GetAuthRole() *admin.AuthRole {
	if m != nil {
		return m.AuthRole
	}
	return nil
}

func (m *LaunchPlanSpec) GetSecurityContext() *core.SecurityContext {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

func (m *LaunchPlanSpec) GetQualityOfService() *core.QualityOfService {
	if m != nil {
		return m.QualityOfService
	}
	return nil
}

func (m *LaunchPlanSpec) GetRawOutputDataConfig() *admin.RawOutputDataConfig {
	if m != nil {
		return m.RawOutputDataConfig
	}
	return nil
}

func (m *LaunchPlanSpec) GetMaxParallelism() int32 {
	if m != nil {
		return m.MaxParallelism
	}
	return 0
}

// Values computed by the flyte platform after launch plan registration.
// These include expected_inputs required to be present in a CreateExecutionRequest
// to launch the reference workflow as well timestamp values associated with the launch plan.
type LaunchPlanClosure struct {
	// Indicate the Launch plan state.
	State admin.LaunchPlanState `protobuf:"varint,1,opt,name=state,proto3,enum=flyteidl.admin.LaunchPlanState" json:"state,omitempty"`
	// Indicates the set of inputs expected when creating an execution with the Launch plan
	ExpectedInputs *ParameterMap `protobuf:"bytes,2,opt,name=expected_inputs,json=expectedInputs,proto3" json:"expected_inputs,omitempty"`
	// Indicates the set of outputs expected to be produced by creating an execution with the Launch plan
	ExpectedOutputs *VariableMap `protobuf:"bytes,3,opt,name=expected_outputs,json=expectedOutputs,proto3" json:"expected_outputs,omitempty"`
	// Time at which the launch plan was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time at which the launch plan was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *LaunchPlanClosure) Reset()         { *m = LaunchPlanClosure{} }
func (m *LaunchPlanClosure) String() string { return proto.CompactTextString(m) }
func (*LaunchPlanClosure) ProtoMessage()    {}
func (*LaunchPlanClosure) Descriptor() ([]byte, []int) {
	return fileDescriptor_368a863574f5e699, []int{6}
}

func (m *LaunchPlanClosure) GetState() admin.LaunchPlanState {
	if m != nil {
		return m.State
	}
	return admin.LaunchPlanState_INACTIVE
}

func (m *LaunchPlanClosure) GetExpectedInputs() *ParameterMap {
	if m != nil {
		return m.ExpectedInputs
	}
	return nil
}

func (m *LaunchPlanClosure) GetExpectedOutputs() *VariableMap {
	if m != nil {
		return m.ExpectedOutputs
	}
	return nil
}

func (m *LaunchPlanClosure) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *LaunchPlanClosure) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

var fileDescriptor_368a863574f5e699 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xef, 0x6e, 0x1b, 0x45,
	0x10, 0xc7, 0xae, 0xe3, 0x24, 0xe3, 0xc6, 0x71, 0x97, 0x2a, 0x3d, 0x9c, 0xd2, 0x06, 0x23, 0x44,
	0x80, 0xd6, 0x96, 0x02, 0x11, 0x6a, 0x69, 0x3f, 0x38, 0x69, 0x3e, 0x58, 0x24, 0x6d, 0xd8, 0x94,
	0x0a, 0xf1, 0xe5, 0xb4, 0xbe, 0x1b, 0xdb, 0x4b, 0xf6, 0x6e, 0x2f, 0xb7, 0x7b, 0x89, 0x23, 0xde,
	0x81, 0xe7, 0xa8, 0x78, 0x17, 0xde, 0x09, 0xdd, 0xde, 0x9e, 0xff, 0xdc, 0x25, 0x2a, 0x20, 0xf1,
	0x29, 0x99, 0x9d, 0xdf, 0x6f, 0x76, 0x66, 0x6e, 0x76, 0x7e, 0x86, 0x9d, 0x91, 0xb8, 0xd6, 0xc8,
	0x7d, 0xd1, 0x63, 0x7e, 0xc0, 0xc3, 0x9e, 0x60, 0x49, 0xe8, 0x4d, 0xdc, 0x48, 0xb0, 0xb0, 0x1b,
	0xc5, 0x52, 0x4b, 0xd2, 0xcc, 0x11, 0x5d, 0x83, 0x68, 0x7f, 0x3a, 0x63, 0x78, 0x32, 0xc6, 0x1e,
	0x4e, 0xd1, 0x4b, 0x34, 0x97, 0x16, 0xde, 0x7e, 0xb8, 0xec, 0x16, 0x5c, 0x63, 0xcc, 0x84, 0xb2,
	0xde, 0x47, 0xcb, 0x5e, 0xee, 0x63, 0xa8, 0xf9, 0x88, 0x63, 0x6c, 0xfd, 0x85, 0xe0, 0x3c, 0xd4,
	0x18, 0x8f, 0x98, 0x87, 0x37, 0x07, 0x57, 0xe8, 0x25, 0x31, 0xd7, 0xd7, 0x25, 0x72, 0x56, 0x8b,
	0xf2, 0x26, 0xe8, 0x27, 0x22, 0x27, 0x6f, 0x17, 0xdc, 0x9e, 0x0c, 0x82, 0x59, 0xda, 0x8f, 0xc7,
	0x52, 0x8e, 0x05, 0xf6, 0x8c, 0x35, 0x4c, 0x46, 0x3d, 0xcd, 0x03, 0x54, 0x9a, 0x05, 0x51, 0x06,
	0xe8, 0x4c, 0xe1, 0xc1, 0xb1, 0xe9, 0xcd, 0xa9, 0x60, 0xe1, 0x61, 0x8c, 0x4c, 0x23, 0xc5, 0x8b,
	0x04, 0x95, 0x26, 0x5f, 0x41, 0x95, 0xfb, 0x4e, 0x65, 0xa7, 0xb2, 0xdb, 0xd8, 0xfb, 0xa4, 0x3b,
	0x6b, 0x57, 0x9a, 0x62, 0x77, 0x30, 0xab, 0x90, 0x56, 0xb9, 0x4f, 0xf6, 0xa0, 0xa6, 0x22, 0xf4,
	0x9c, 0xaa, 0x01, 0x3f, 0xea, 0x2e, 0xf7, 0xb6, 0x3b, 0xbf, 0xe1, 0x2c, 0x42, 0x8f, 0x1a, 0x6c,
	0xa7, 0x0d, 0x4e, 0xf9, 0x66, 0x15, 0xc9, 0x50, 0x61, 0xe7, 0x7d, 0x05, 0x60, 0xee, 0xfc, 0x9f,
	0x33, 0x21, 0x3f, 0xc0, 0xaa, 0x27, 0xa4, 0x4a, 0x62, 0x74, 0xee, 0x18, 0xda, 0x67, 0xb7, 0xd3,
	0x0e, 0x33, 0x20, 0xcd, 0x19, 0x1d, 0x84, 0xe6, 0xdc, 0x7b, 0xcc, 0x95, 0x26, 0x2f, 0xe1, 0xee,
	0xc2, 0xb8, 0x29, 0xa7, 0xb2, 0x73, 0x67, 0xb7, 0xb1, 0xd7, 0xbe, 0x3d, 0x26, 0x6d, 0x88, 0xd9,
	0xff, 0x8a, 0xdc, 0x87, 0x15, 0x2d, 0xcf, 0x31, 0x34, 0x25, 0xac, 0xd3, 0xcc, 0xe8, 0x5c, 0x42,
	0xad, 0x9f, 0xe8, 0x09, 0x79, 0x02, 0x84, 0x29, 0x95, 0x04, 0x6c, 0x28, 0xd0, 0xe5, 0x2c, 0x70,
	0x63, 0x29, 0xd0, 0xb4, 0x66, 0x9d, 0xb6, 0x66, 0x9e, 0x01, 0x0b, 0xa8, 0x14, 0x48, 0x5e, 0x40,
	0xfb, 0x3c, 0x19, 0x62, 0x1c, 0xa2, 0x46, 0xe5, 0x2a, 0x8c, 0x2f, 0xb9, 0x87, 0x2e, 0xf3, 0x3c,
	0x99, 0x84, 0xda, 0x5e, 0xe0, 0xcc, 0x11, 0x67, 0x19, 0xa0, 0x9f, 0xf9, 0x9f, 0x57, 0x9d, 0x4a,
	0xe7, 0x7d, 0x7d, 0xb1, 0xbe, 0xb4, 0x69, 0xe4, 0x39, 0x34, 0xae, 0x64, 0x7c, 0x3e, 0x12, 0xf2,
	0xca, 0xfd, 0x27, 0x9f, 0x05, 0x72, 0xf4, 0xc0, 0x27, 0x3f, 0xc2, 0x66, 0x7a, 0xae, 0xaf, 0xdd,
	0x00, 0x35, 0xf3, 0x99, 0x66, 0xf6, 0x4b, 0x75, 0x6e, 0x6f, 0xcf, 0x89, 0x45, 0xd2, 0x66, 0x46,
	0xcd, 0x6d, 0x72, 0x00, 0x4d, 0x1f, 0x47, 0x2c, 0x11, 0xda, 0xe5, 0x61, 0x94, 0x68, 0x65, 0x3f,
	0xdf, 0x76, 0x21, 0x97, 0x53, 0x16, 0xb3, 0x00, 0x35, 0xc6, 0x27, 0x2c, 0xa2, 0x1b, 0x96, 0x32,
	0x30, 0x0c, 0xf2, 0x02, 0xee, 0x8e, 0xf8, 0x14, 0xfd, 0x3c, 0x42, 0xed, 0xc6, 0x6a, 0x8e, 0xb3,
	0xe7, 0x9e, 0xf2, 0x1b, 0x06, 0x6e, 0xd9, 0x5b, 0x50, 0x33, 0xfd, 0x5f, 0x49, 0x3b, 0x79, 0x50,
	0x75, 0x2a, 0xd4, 0xd8, 0xa4, 0x0b, 0x75, 0xc1, 0x86, 0x28, 0x94, 0x53, 0x37, 0xf1, 0xb6, 0xca,
	0xd5, 0xa5, 0x5e, 0x6a, 0x51, 0xe4, 0x25, 0x34, 0x58, 0x18, 0x4a, 0xcd, 0xd2, 0x8d, 0xa3, 0x9c,
	0xd5, 0x62, 0x19, 0x19, 0xa9, 0x3f, 0x87, 0xd0, 0x45, 0x3c, 0x79, 0x02, 0x35, 0x96, 0xe8, 0x89,
	0xb3, 0x66, 0x78, 0xf7, 0x4b, 0xbc, 0x44, 0x4f, 0xb2, 0xe4, 0x52, 0x14, 0x79, 0x06, 0xeb, 0xe9,
	0xdf, 0x6c, 0x72, 0xd6, 0x0d, 0xc5, 0xb9, 0x89, 0x92, 0x4e, 0x90, 0xa1, 0xad, 0x31, 0x6b, 0x91,
	0x01, 0xb4, 0xf2, 0xe5, 0xe4, 0x7a, 0x32, 0xd4, 0x38, 0xd5, 0x0e, 0x14, 0x5f, 0x9a, 0xe9, 0xd8,
	0x99, 0x85, 0x1d, 0x66, 0x28, 0xba, 0xa9, 0x96, 0x0f, 0xc8, 0x09, 0x90, 0x8b, 0x84, 0x89, 0x34,
	0x92, 0x1c, 0xe5, 0xa3, 0xe9, 0xb4, 0x4c, 0xb0, 0xc7, 0x85, 0x60, 0x3f, 0x65, 0xc0, 0x37, 0x23,
	0x3b, 0xa0, 0xb4, 0x75, 0x51, 0x38, 0x21, 0xbf, 0xc0, 0x56, 0xcc, 0xae, 0x5c, 0x99, 0xe8, 0x28,
	0xd1, 0x6e, 0x3a, 0x1e, 0x69, 0x82, 0x23, 0x3e, 0x76, 0xee, 0x99, 0x90, 0x9f, 0x17, 0x2b, 0xa4,
	0xec, 0xea, 0x8d, 0x01, 0xbf, 0x62, 0x9a, 0x1d, 0x1a, 0x28, 0xfd, 0x38, 0x2e, 0x1f, 0x92, 0x2f,
	0x61, 0x33, 0x60, 0x53, 0x37, 0x62, 0x31, 0x13, 0x02, 0x05, 0x57, 0x81, 0x43, 0x76, 0x2a, 0xbb,
	0x2b, 0xb4, 0x19, 0xb0, 0xe9, 0xe9, 0xfc, 0xb4, 0xf3, 0x57, 0x15, 0xee, 0x95, 0x16, 0x05, 0xd9,
	0x87, 0x15, 0xa5, 0x99, 0xce, 0xde, 0x68, 0x73, 0xb1, 0xb4, 0xd2, 0x46, 0x4a, 0x61, 0x34, 0x43,
	0x93, 0x57, 0xb0, 0x89, 0xd3, 0x08, 0x3d, 0x3d, 0x1f, 0xcd, 0xea, 0x87, 0x87, 0xbb, 0x99, 0x73,
	0xec, 0x7c, 0x1e, 0x41, 0x6b, 0x16, 0x25, 0x6b, 0x4d, 0xfe, 0x46, 0xda, 0x85, 0x30, 0xef, 0x58,
	0xcc, 0xd3, 0xcd, 0x91, 0x46, 0x99, 0xdd, 0x9c, 0xf5, 0x42, 0x91, 0x67, 0x00, 0x9e, 0x59, 0xd0,
	0xbe, 0xcb, 0xb4, 0x7d, 0x22, 0xed, 0x6e, 0x26, 0x2d, 0xdd, 0x5c, 0x5a, 0xba, 0x6f, 0x73, 0x69,
	0xa1, 0xeb, 0x16, 0xdd, 0xd7, 0x29, 0x35, 0x89, 0xfc, 0x9c, 0xba, 0xf2, 0x61, 0xaa, 0x45, 0xf7,
	0x75, 0xe7, 0x8f, 0x0a, 0x90, 0xf2, 0x16, 0x20, 0xdf, 0xc1, 0x5a, 0xae, 0x80, 0x76, 0xf7, 0x94,
	0xa6, 0xf7, 0xcc, 0xfa, 0xe9, 0x0c, 0x49, 0x0e, 0x60, 0x23, 0x94, 0xe9, 0x42, 0xf2, 0xec, 0x1b,
	0xab, 0x9a, 0xad, 0xfc, 0xb0, 0x48, 0x7d, 0xbd, 0x00, 0xa2, 0xcb, 0x94, 0xce, 0xef, 0x8b, 0x5a,
	0xf9, 0xb3, 0xc9, 0xf3, 0x3f, 0x68, 0xe5, 0x6c, 0x20, 0xaa, 0xff, 0x66, 0x20, 0x96, 0xe5, 0x32,
	0xbf, 0xdc, 0xca, 0xe5, 0x29, 0x3c, 0xe8, 0x7b, 0x9a, 0x5f, 0xe2, 0x82, 0xa6, 0xd8, 0xc4, 0xf6,
	0x17, 0x12, 0xfb, 0xa2, 0x54, 0x2c, 0x0b, 0xd0, 0x3f, 0x32, 0x4b, 0x75, 0x39, 0xc9, 0xce, 0x9f,
	0x15, 0xd8, 0x2e, 0x86, 0x4c, 0xc5, 0x2d, 0x0f, 0xeb, 0xc0, 0x6a, 0x14, 0xcb, 0xdf, 0xd0, 0xd3,
	0x56, 0x7b, 0x72, 0x93, 0x6c, 0x41, 0xdd, 0x97, 0x01, 0xe3, 0xb9, 0x7e, 0x59, 0x2b, 0x95, 0x35,
	0xc1, 0x03, 0xae, 0xcd, 0xfc, 0x6d, 0xd0, 0xcc, 0x98, 0x8b, 0x5d, 0x6d, 0x41, 0xec, 0xc8, 0x53,
	0x58, 0x55, 0x32, 0xd6, 0xee, 0xf0, 0xda, 0x4e, 0x4c, 0x69, 0xa5, 0x9d, 0xc9, 0x58, 0xd3, 0x7a,
	0x0a, 0x3a, 0xb8, 0xfe, 0xfa, 0x1b, 0xd8, 0x2c, 0x34, 0x8d, 0xdc, 0x85, 0xb5, 0xc1, 0xeb, 0xfe,
	0xe1, 0xdb, 0xc1, 0xbb, 0xa3, 0xd6, 0x47, 0x04, 0xa0, 0x6e, 0xff, 0xaf, 0x1c, 0x7c, 0xff, 0xeb,
	0xfe, 0x98, 0xeb, 0x49, 0x32, 0xec, 0x7a, 0x32, 0xe8, 0x99, 0xb0, 0x32, 0x1e, 0xf7, 0x66, 0x3f,
	0xa2, 0xc6, 0x18, 0xf6, 0xa2, 0xe1, 0xd3, 0xb1, 0xec, 0x2d, 0xff, 0xae, 0x1a, 0xd6, 0xcd, 0xb4,
	0x7e, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x18, 0x1f, 0x6d, 0x5b, 0x0a, 0x00, 0x00,
}

func ToLegacyLaunchPlan(launchPlan *admin.LaunchPlan) *LaunchPlan {
	return &LaunchPlan{
		Id:      launchPlan.Id,
		Spec:    ToLegacyLaunchPlanSpec(launchPlan.Spec),
		Closure: ToLegacyLaunchPlanClosure(launchPlan.Closure),
	}
}

func ToLegacyLaunchPlanSpec(spec *admin.LaunchPlanSpec) *LaunchPlanSpec {
	return &LaunchPlanSpec{
		WorkflowId:          spec.WorkflowId,
		EntityMetadata:      spec.EntityMetadata,
		DefaultInputs:       ToLegacyParameterMap(spec.DefaultInputs),
		FixedInputs:         spec.FixedInputs,
		Role:                spec.Role,
		Labels:              spec.Labels,
		Annotations:         spec.Annotations,
		Auth:                spec.Auth,
		AuthRole:            spec.AuthRole,
		SecurityContext:     spec.SecurityContext,
		QualityOfService:    spec.QualityOfService,
		RawOutputDataConfig: spec.RawOutputDataConfig,
		MaxParallelism:      spec.MaxParallelism,
	}
}

func ToLegacyLaunchPlanClosure(closure *admin.LaunchPlanClosure) *LaunchPlanClosure {
	return &LaunchPlanClosure{
		State:           closure.State,
		ExpectedInputs:  ToLegacyParameterMap(closure.ExpectedInputs),
		ExpectedOutputs: ToLegacyVariableMap(closure.ExpectedOutputs),
		CreatedAt:       closure.CreatedAt,
		UpdatedAt:       closure.UpdatedAt,
	}
}

func ToLegacyVariableMap(variableMap *core.VariableMap) *VariableMap {
	if variableMap == nil {
		return nil
	}
	v := make(map[string]*core.Variable, len(variableMap.Variables))
	for _, e := range variableMap.Variables {
		v[e.Name] = e.Var
	}
	return &VariableMap{
		Variables: v,
	}
}

func ToLegacyParameterMap(parameterMap *core.ParameterMap) *ParameterMap {
	if parameterMap == nil {
		return nil
	}
	p := make(map[string]*core.Parameter, len(parameterMap.Parameters))
	for _, e := range parameterMap.Parameters {
		p[e.Name] = e.Parameter
	}
	return &ParameterMap{
		Parameters: p,
	}
}
