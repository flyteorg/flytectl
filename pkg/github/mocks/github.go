// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v42/github"
	mock "github.com/stretchr/testify/mock"
)

// Github is an autogenerated mock type for the Github type
type Github struct {
	mock.Mock
}

type Github_GetCommitSHA1 struct {
	*mock.Call
}

func (_m Github_GetCommitSHA1) Return(_a0 string, _a1 *github.Response, _a2 error) *Github_GetCommitSHA1 {
	return &Github_GetCommitSHA1{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *Github) OnGetCommitSHA1(ctx context.Context, owner string, repo string, ref string, lastSHA string) *Github_GetCommitSHA1 {
	c_call := _m.On("GetCommitSHA1", ctx, owner, repo, ref, lastSHA)
	return &Github_GetCommitSHA1{Call: c_call}
}

func (_m *Github) OnGetCommitSHA1Match(matchers ...interface{}) *Github_GetCommitSHA1 {
	c_call := _m.On("GetCommitSHA1", matchers...)
	return &Github_GetCommitSHA1{Call: c_call}
}

// GetCommitSHA1 provides a mock function with given fields: ctx, owner, repo, ref, lastSHA
func (_m *Github) GetCommitSHA1(ctx context.Context, owner string, repo string, ref string, lastSHA string) (string, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, ref, lastSHA)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type Github_GetLatestRelease struct {
	*mock.Call
}

func (_m Github_GetLatestRelease) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *Github_GetLatestRelease {
	return &Github_GetLatestRelease{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *Github) OnGetLatestRelease(ctx context.Context, owner string, repo string) *Github_GetLatestRelease {
	c_call := _m.On("GetLatestRelease", ctx, owner, repo)
	return &Github_GetLatestRelease{Call: c_call}
}

func (_m *Github) OnGetLatestReleaseMatch(matchers ...interface{}) *Github_GetLatestRelease {
	c_call := _m.On("GetLatestRelease", matchers...)
	return &Github_GetLatestRelease{Call: c_call}
}

// GetLatestRelease provides a mock function with given fields: ctx, owner, repo
func (_m *Github) GetLatestRelease(ctx context.Context, owner string, repo string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type Github_GetReleaseByTag struct {
	*mock.Call
}

func (_m Github_GetReleaseByTag) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *Github_GetReleaseByTag {
	return &Github_GetReleaseByTag{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *Github) OnGetReleaseByTag(ctx context.Context, owner string, repo string, tag string) *Github_GetReleaseByTag {
	c_call := _m.On("GetReleaseByTag", ctx, owner, repo, tag)
	return &Github_GetReleaseByTag{Call: c_call}
}

func (_m *Github) OnGetReleaseByTagMatch(matchers ...interface{}) *Github_GetReleaseByTag {
	c_call := _m.On("GetReleaseByTag", matchers...)
	return &Github_GetReleaseByTag{Call: c_call}
}

// GetReleaseByTag provides a mock function with given fields: ctx, owner, repo, tag
func (_m *Github) GetReleaseByTag(ctx context.Context, owner string, repo string, tag string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, tag)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type Github_ListReleases struct {
	*mock.Call
}

func (_m Github_ListReleases) Return(_a0 []*github.RepositoryRelease, _a1 *github.Response, _a2 error) *Github_ListReleases {
	return &Github_ListReleases{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *Github) OnListReleases(ctx context.Context, owner string, repo string, opts *github.ListOptions) *Github_ListReleases {
	c_call := _m.On("ListReleases", ctx, owner, repo, opts)
	return &Github_ListReleases{Call: c_call}
}

func (_m *Github) OnListReleasesMatch(matchers ...interface{}) *Github_ListReleases {
	c_call := _m.On("ListReleases", matchers...)
	return &Github_ListReleases{Call: c_call}
}

// ListReleases provides a mock function with given fields: ctx, owner, repo, opts
func (_m *Github) ListReleases(ctx context.Context, owner string, repo string, opts *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	var r0 []*github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
