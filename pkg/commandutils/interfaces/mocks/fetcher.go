// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_FetchAllVerOfLP struct {
	*mock.Call
}

func (_m Fetcher_FetchAllVerOfLP) Return(_a0 []*admin.LaunchPlan, _a1 error) *Fetcher_FetchAllVerOfLP {
	return &Fetcher_FetchAllVerOfLP{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchAllVerOfLP(ctx context.Context, lpName string, project string, domain string) *Fetcher_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", ctx, lpName, project, domain)
	return &Fetcher_FetchAllVerOfLP{Call: c}
}

func (_m *Fetcher) OnFetchAllVerOfLPMatch(matchers ...interface{}) *Fetcher_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", matchers...)
	return &Fetcher_FetchAllVerOfLP{Call: c}
}

// FetchAllVerOfLP provides a mock function with given fields: ctx, lpName, project, domain
func (_m *Fetcher) FetchAllVerOfLP(ctx context.Context, lpName string, project string, domain string) ([]*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, lpName, project, domain)

	var r0 []*admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*admin.LaunchPlan); ok {
		r0 = rf(ctx, lpName, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, lpName, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchAllVerOfTask struct {
	*mock.Call
}

func (_m Fetcher_FetchAllVerOfTask) Return(_a0 []*admin.Task, _a1 error) *Fetcher_FetchAllVerOfTask {
	return &Fetcher_FetchAllVerOfTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchAllVerOfTask(ctx context.Context, name string, project string, domain string) *Fetcher_FetchAllVerOfTask {
	c := _m.On("FetchAllVerOfTask", ctx, name, project, domain)
	return &Fetcher_FetchAllVerOfTask{Call: c}
}

func (_m *Fetcher) OnFetchAllVerOfTaskMatch(matchers ...interface{}) *Fetcher_FetchAllVerOfTask {
	c := _m.On("FetchAllVerOfTask", matchers...)
	return &Fetcher_FetchAllVerOfTask{Call: c}
}

// FetchAllVerOfTask provides a mock function with given fields: ctx, name, project, domain
func (_m *Fetcher) FetchAllVerOfTask(ctx context.Context, name string, project string, domain string) ([]*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 []*admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*admin.Task); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchExecution struct {
	*mock.Call
}

func (_m Fetcher_FetchExecution) Return(_a0 *admin.Execution, _a1 error) *Fetcher_FetchExecution {
	return &Fetcher_FetchExecution{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchExecution(ctx context.Context, name string, project string, domain string) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", ctx, name, project, domain)
	return &Fetcher_FetchExecution{Call: c}
}

func (_m *Fetcher) OnFetchExecutionMatch(matchers ...interface{}) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", matchers...)
	return &Fetcher_FetchExecution{Call: c}
}

// FetchExecution provides a mock function with given fields: ctx, name, project, domain
func (_m *Fetcher) FetchExecution(ctx context.Context, name string, project string, domain string) (*admin.Execution, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.Execution
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Execution); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPLatestVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchLPLatestVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *Fetcher_FetchLPLatestVersion {
	return &Fetcher_FetchLPLatestVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPLatestVersion(ctx context.Context, name string, project string, domain string) *Fetcher_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", ctx, name, project, domain)
	return &Fetcher_FetchLPLatestVersion{Call: c}
}

func (_m *Fetcher) OnFetchLPLatestVersionMatch(matchers ...interface{}) *Fetcher_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", matchers...)
	return &Fetcher_FetchLPLatestVersion{Call: c}
}

// FetchLPLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *Fetcher) FetchLPLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchLPVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *Fetcher_FetchLPVersion {
	return &Fetcher_FetchLPVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPVersion(ctx context.Context, name string, version string, project string, domain string) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", ctx, name, version, project, domain)
	return &Fetcher_FetchLPVersion{Call: c}
}

func (_m *Fetcher) OnFetchLPVersionMatch(matchers ...interface{}) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", matchers...)
	return &Fetcher_FetchLPVersion{Call: c}
}

// FetchLPVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *Fetcher) FetchLPVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchTaskLatestVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchTaskLatestVersion) Return(_a0 *admin.Task, _a1 error) *Fetcher_FetchTaskLatestVersion {
	return &Fetcher_FetchTaskLatestVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchTaskLatestVersion(ctx context.Context, name string, project string, domain string) *Fetcher_FetchTaskLatestVersion {
	c := _m.On("FetchTaskLatestVersion", ctx, name, project, domain)
	return &Fetcher_FetchTaskLatestVersion{Call: c}
}

func (_m *Fetcher) OnFetchTaskLatestVersionMatch(matchers ...interface{}) *Fetcher_FetchTaskLatestVersion {
	c := _m.On("FetchTaskLatestVersion", matchers...)
	return &Fetcher_FetchTaskLatestVersion{Call: c}
}

// FetchTaskLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *Fetcher) FetchTaskLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Task); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchTaskVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchTaskVersion) Return(_a0 *admin.Task, _a1 error) *Fetcher_FetchTaskVersion {
	return &Fetcher_FetchTaskVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchTaskVersion(ctx context.Context, name string, version string, project string, domain string) *Fetcher_FetchTaskVersion {
	c := _m.On("FetchTaskVersion", ctx, name, version, project, domain)
	return &Fetcher_FetchTaskVersion{Call: c}
}

func (_m *Fetcher) OnFetchTaskVersionMatch(matchers ...interface{}) *Fetcher_FetchTaskVersion {
	c := _m.On("FetchTaskVersion", matchers...)
	return &Fetcher_FetchTaskVersion{Call: c}
}

// FetchTaskVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *Fetcher) FetchTaskVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.Task, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	var r0 *admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.Task); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
