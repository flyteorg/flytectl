// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots.

package serialize

import (
	"encoding/json"
	"reflect"

	"fmt"

	"github.com/spf13/pflag"
)

// If v is a pointer, it will get its element value or the zero value of the element type.
// If v is not a pointer, it will return it as is.
func (Config) elemValueOrNil(v interface{}) interface{} {
	if t := reflect.TypeOf(v); t.Kind() == reflect.Ptr {
		if reflect.ValueOf(v).IsNil() {
			return reflect.Zero(t.Elem()).Interface()
		} else {
			return reflect.ValueOf(v).Interface()
		}
	} else if v == nil {
		return reflect.Zero(t).Interface()
	}

	return v
}

func (Config) mustJsonMarshal(v interface{}) string {
	raw, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}

	return string(raw)
}

func (Config) mustMarshalJSON(v json.Marshaler) string {
	raw, err := v.MarshalJSON()
	if err != nil {
		panic(err)
	}

	return string(raw)
}

// GetPFlagSet will return strongly types pflags for all fields in Config and its nested types. The format of the
// flags is json-name.json-sub-name... etc.
func (cfg Config) GetPFlagSet(prefix string) *pflag.FlagSet {
	cmdFlags := pflag.NewFlagSet("Config", pflag.ExitOnError)
	cmdFlags.StringVar(&DefaultFilesConfig.Image, fmt.Sprintf("%v%v", prefix, "image"), DefaultFilesConfig.Image, " Docker image name")
	cmdFlags.StringVar(&DefaultFilesConfig.Registry, fmt.Sprintf("%v%v", prefix, "registry"), DefaultFilesConfig.Registry, " Docker image name")
	cmdFlags.StringVar(&DefaultFilesConfig.ServiceAccount, fmt.Sprintf("%v%v", prefix, "service-account"), DefaultFilesConfig.ServiceAccount, "Service account name.")
	cmdFlags.StringVar(&DefaultFilesConfig.Version, fmt.Sprintf("%v%v", prefix, "version"), DefaultFilesConfig.Version, " workflow version")
	cmdFlags.StringVar(&DefaultFilesConfig.OutputDir, fmt.Sprintf("%v%v", prefix, "output-dir"), DefaultFilesConfig.OutputDir, " custom output location ")
	cmdFlags.StringVar(&DefaultFilesConfig.OutputDirprefix, fmt.Sprintf("%v%v", prefix, "output-dir-prefix"), DefaultFilesConfig.OutputDirprefix, " Container registry ")
	cmdFlags.StringVar(&DefaultFilesConfig.FlyteAwsEndpoint, fmt.Sprintf("%v%v", prefix, "flyte-aws-endpoint"), DefaultFilesConfig.FlyteAwsEndpoint, " Container registry ")
	cmdFlags.StringVar(&DefaultFilesConfig.FlyteAwsKey, fmt.Sprintf("%v%v", prefix, "flyte-aws-key"), DefaultFilesConfig.FlyteAwsKey, " Container registry ")
	cmdFlags.StringVar(&DefaultFilesConfig.FlyteAwsSecret, fmt.Sprintf("%v%v", prefix, "flyte-aws-secret"), DefaultFilesConfig.FlyteAwsSecret, " Container registry ")
	cmdFlags.StringVar(&DefaultFilesConfig.Command, fmt.Sprintf("%v%v", prefix, "command"), DefaultFilesConfig.Command, " Container registry ")
	return cmdFlags
}
