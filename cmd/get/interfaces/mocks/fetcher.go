// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	cmdcore "github.com/flyteorg/flytectl/cmd/core"
	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_FetchExecution struct {
	*mock.Call
}

func (_m Fetcher_FetchExecution) Return(_a0 *admin.Execution, _a1 error) *Fetcher_FetchExecution {
	return &Fetcher_FetchExecution{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchExecution(ctx context.Context, name string, project string, domain string, cmdCtx cmdcore.CommandContext) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", ctx, name, project, domain, cmdCtx)
	return &Fetcher_FetchExecution{Call: c}
}

func (_m *Fetcher) OnFetchExecutionMatch(matchers ...interface{}) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", matchers...)
	return &Fetcher_FetchExecution{Call: c}
}

// FetchExecution provides a mock function with given fields: ctx, name, project, domain, cmdCtx
func (_m *Fetcher) FetchExecution(ctx context.Context, name string, project string, domain string, cmdCtx cmdcore.CommandContext) (*admin.Execution, error) {
	ret := _m.Called(ctx, name, project, domain, cmdCtx)

	var r0 *admin.Execution
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, cmdcore.CommandContext) *admin.Execution); ok {
		r0 = rf(ctx, name, project, domain, cmdCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, cmdcore.CommandContext) error); ok {
		r1 = rf(ctx, name, project, domain, cmdCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchLPVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *Fetcher_FetchLPVersion {
	return &Fetcher_FetchLPVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPVersion(ctx context.Context, name string, version string, project string, domain string, cmdCtx cmdcore.CommandContext) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", ctx, name, version, project, domain, cmdCtx)
	return &Fetcher_FetchLPVersion{Call: c}
}

func (_m *Fetcher) OnFetchLPVersionMatch(matchers ...interface{}) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", matchers...)
	return &Fetcher_FetchLPVersion{Call: c}
}

// FetchLPVersion provides a mock function with given fields: ctx, name, version, project, domain, cmdCtx
func (_m *Fetcher) FetchLPVersion(ctx context.Context, name string, version string, project string, domain string, cmdCtx cmdcore.CommandContext) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, version, project, domain, cmdCtx)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, cmdcore.CommandContext) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, version, project, domain, cmdCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, cmdcore.CommandContext) error); ok {
		r1 = rf(ctx, name, version, project, domain, cmdCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
