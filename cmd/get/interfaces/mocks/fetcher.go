// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_FetchAllVerOfLP struct {
	*mock.Call
}

func (_m Fetcher_FetchAllVerOfLP) Return(_a0 []*admin.LaunchPlan, _a1 error) *Fetcher_FetchAllVerOfLP {
	return &Fetcher_FetchAllVerOfLP{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchAllVerOfLP(ctx context.Context, adminClient service.AdminServiceClient, lpName string, project string, domain string) *Fetcher_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", ctx, adminClient, lpName, project, domain)
	return &Fetcher_FetchAllVerOfLP{Call: c}
}

func (_m *Fetcher) OnFetchAllVerOfLPMatch(matchers ...interface{}) *Fetcher_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", matchers...)
	return &Fetcher_FetchAllVerOfLP{Call: c}
}

// FetchAllVerOfLP provides a mock function with given fields: ctx, adminClient, lpName, project, domain
func (_m *Fetcher) FetchAllVerOfLP(ctx context.Context, adminClient service.AdminServiceClient, lpName string, project string, domain string) ([]*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, adminClient, lpName, project, domain)

	var r0 []*admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string) []*admin.LaunchPlan); ok {
		r0 = rf(ctx, adminClient, lpName, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string) error); ok {
		r1 = rf(ctx, adminClient, lpName, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchExecution struct {
	*mock.Call
}

func (_m Fetcher_FetchExecution) Return(_a0 *admin.Execution, _a1 error) *Fetcher_FetchExecution {
	return &Fetcher_FetchExecution{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchExecution(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", ctx, adminClient, name, project, domain)
	return &Fetcher_FetchExecution{Call: c}
}

func (_m *Fetcher) OnFetchExecutionMatch(matchers ...interface{}) *Fetcher_FetchExecution {
	c := _m.On("FetchExecution", matchers...)
	return &Fetcher_FetchExecution{Call: c}
}

// FetchExecution provides a mock function with given fields: ctx, adminClient, name, project, domain
func (_m *Fetcher) FetchExecution(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) (*admin.Execution, error) {
	ret := _m.Called(ctx, adminClient, name, project, domain)

	var r0 *admin.Execution
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string) *admin.Execution); ok {
		r0 = rf(ctx, adminClient, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string) error); ok {
		r1 = rf(ctx, adminClient, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPForName struct {
	*mock.Call
}

func (_m Fetcher_FetchLPForName) Return(_a0 []*admin.LaunchPlan, _a1 error) *Fetcher_FetchLPForName {
	return &Fetcher_FetchLPForName{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPForName(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) *Fetcher_FetchLPForName {
	c := _m.On("FetchLPForName", ctx, adminClient, name, project, domain)
	return &Fetcher_FetchLPForName{Call: c}
}

func (_m *Fetcher) OnFetchLPForNameMatch(matchers ...interface{}) *Fetcher_FetchLPForName {
	c := _m.On("FetchLPForName", matchers...)
	return &Fetcher_FetchLPForName{Call: c}
}

// FetchLPForName provides a mock function with given fields: ctx, adminClient, name, project, domain
func (_m *Fetcher) FetchLPForName(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) ([]*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, adminClient, name, project, domain)

	var r0 []*admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string) []*admin.LaunchPlan); ok {
		r0 = rf(ctx, adminClient, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string) error); ok {
		r1 = rf(ctx, adminClient, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPLatestVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchLPLatestVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *Fetcher_FetchLPLatestVersion {
	return &Fetcher_FetchLPLatestVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPLatestVersion(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) *Fetcher_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", ctx, adminClient, name, project, domain)
	return &Fetcher_FetchLPLatestVersion{Call: c}
}

func (_m *Fetcher) OnFetchLPLatestVersionMatch(matchers ...interface{}) *Fetcher_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", matchers...)
	return &Fetcher_FetchLPLatestVersion{Call: c}
}

// FetchLPLatestVersion provides a mock function with given fields: ctx, adminClient, name, project, domain
func (_m *Fetcher) FetchLPLatestVersion(ctx context.Context, adminClient service.AdminServiceClient, name string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, adminClient, name, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, adminClient, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string) error); ok {
		r1 = rf(ctx, adminClient, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_FetchLPVersion struct {
	*mock.Call
}

func (_m Fetcher_FetchLPVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *Fetcher_FetchLPVersion {
	return &Fetcher_FetchLPVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnFetchLPVersion(ctx context.Context, adminClient service.AdminServiceClient, name string, version string, project string, domain string) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", ctx, adminClient, name, version, project, domain)
	return &Fetcher_FetchLPVersion{Call: c}
}

func (_m *Fetcher) OnFetchLPVersionMatch(matchers ...interface{}) *Fetcher_FetchLPVersion {
	c := _m.On("FetchLPVersion", matchers...)
	return &Fetcher_FetchLPVersion{Call: c}
}

// FetchLPVersion provides a mock function with given fields: ctx, adminClient, name, version, project, domain
func (_m *Fetcher) FetchLPVersion(ctx context.Context, adminClient service.AdminServiceClient, name string, version string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, adminClient, name, version, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, adminClient, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string, string) error); ok {
		r1 = rf(ctx, adminClient, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_GetProjectDomainAttributes struct {
	*mock.Call
}

func (_m Fetcher_GetProjectDomainAttributes) Return(_a0 *admin.ProjectDomainAttributesGetResponse, _a1 error) *Fetcher_GetProjectDomainAttributes {
	return &Fetcher_GetProjectDomainAttributes{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnGetProjectDomainAttributes(ctx context.Context, adminClient service.AdminServiceClient, project string, domain string, rsType admin.MatchableResource) *Fetcher_GetProjectDomainAttributes {
	c := _m.On("GetProjectDomainAttributes", ctx, adminClient, project, domain, rsType)
	return &Fetcher_GetProjectDomainAttributes{Call: c}
}

func (_m *Fetcher) OnGetProjectDomainAttributesMatch(matchers ...interface{}) *Fetcher_GetProjectDomainAttributes {
	c := _m.On("GetProjectDomainAttributes", matchers...)
	return &Fetcher_GetProjectDomainAttributes{Call: c}
}

// GetProjectDomainAttributes provides a mock function with given fields: ctx, adminClient, project, domain, rsType
func (_m *Fetcher) GetProjectDomainAttributes(ctx context.Context, adminClient service.AdminServiceClient, project string, domain string, rsType admin.MatchableResource) (*admin.ProjectDomainAttributesGetResponse, error) {
	ret := _m.Called(ctx, adminClient, project, domain, rsType)

	var r0 *admin.ProjectDomainAttributesGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, admin.MatchableResource) *admin.ProjectDomainAttributesGetResponse); ok {
		r0 = rf(ctx, adminClient, project, domain, rsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, admin.MatchableResource) error); ok {
		r1 = rf(ctx, adminClient, project, domain, rsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Fetcher_GetWorkflowAttributes struct {
	*mock.Call
}

func (_m Fetcher_GetWorkflowAttributes) Return(_a0 *admin.WorkflowAttributesGetResponse, _a1 error) *Fetcher_GetWorkflowAttributes {
	return &Fetcher_GetWorkflowAttributes{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Fetcher) OnGetWorkflowAttributes(ctx context.Context, adminClient service.AdminServiceClient, project string, domain string, name string, rsType admin.MatchableResource) *Fetcher_GetWorkflowAttributes {
	c := _m.On("GetWorkflowAttributes", ctx, adminClient, project, domain, name, rsType)
	return &Fetcher_GetWorkflowAttributes{Call: c}
}

func (_m *Fetcher) OnGetWorkflowAttributesMatch(matchers ...interface{}) *Fetcher_GetWorkflowAttributes {
	c := _m.On("GetWorkflowAttributes", matchers...)
	return &Fetcher_GetWorkflowAttributes{Call: c}
}

// GetWorkflowAttributes provides a mock function with given fields: ctx, adminClient, project, domain, name, rsType
func (_m *Fetcher) GetWorkflowAttributes(ctx context.Context, adminClient service.AdminServiceClient, project string, domain string, name string, rsType admin.MatchableResource) (*admin.WorkflowAttributesGetResponse, error) {
	ret := _m.Called(ctx, adminClient, project, domain, name, rsType)

	var r0 *admin.WorkflowAttributesGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, service.AdminServiceClient, string, string, string, admin.MatchableResource) *admin.WorkflowAttributesGetResponse); ok {
		r0 = rf(ctx, adminClient, project, domain, name, rsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AdminServiceClient, string, string, string, admin.MatchableResource) error); ok {
		r1 = rf(ctx, adminClient, project, domain, name, rsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
